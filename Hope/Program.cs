using FluentValidation;
using FluentValidation.AspNetCore;
using Hope.Application.Authentication.Commands.Register;
using Hope.Application.Common.Behaviors;
using Hope.Infrastructure;
using MediatR;
using Microsoft.OpenApi.Models;
using System.Globalization;
using Microsoft.AspNetCore.Localization;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();

// Add localization services
builder.Services.AddLocalization(options => options.ResourcesPath = "Resources");

builder.Services.Configure<RequestLocalizationOptions>(options =>
{
    var supportedCultures = new[]
    {
        new CultureInfo("en"),
        new CultureInfo("ar")
    };

    options.DefaultRequestCulture = new RequestCulture("en");
    options.SupportedCultures = supportedCultures;
    options.SupportedUICultures = supportedCultures;
});

//================== Swagger =====================================
builder.Services.AddSwaggerGen(options =>
{
    options.SwaggerDoc("v1",
                 new OpenApiInfo
                 {
                     Title = "Hope API",
                     Description = "API For Hope Project",
                     Version = "v1",
                     TermsOfService = null
                 });
    options.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Name = "Authorization",
        Type = SecuritySchemeType.Http,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme."
    });
    options.AddSecurityRequirement(new OpenApiSecurityRequirement()
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            Array.Empty<string>()
        }
    });

    //Locate the XML file being generated by ASP.NET...
    foreach (var name in Directory.GetFiles(AppContext.BaseDirectory, "*.xml", SearchOption.AllDirectories).Distinct().Where(x => x.Contains("Hope.Api.xml")))
    {
        //... and tell Swagger to use those XML comments.
        options.IncludeXmlComments(filePath: name);
    }
    
    // Note: You'll need to implement these filters or remove these lines
    // options.DocumentFilter<FeatureGateDocumentFilter>();
    // options.OperationFilter<AddHeaderParameter>();
});

// Add Infrastructure services
builder.Services.AddInfrastructure(builder.Configuration);

// Add MediatR
builder.Services.AddMediatR(cfg => {
    cfg.RegisterServicesFromAssembly(typeof(RegisterCommand).Assembly);
    cfg.AddBehavior(typeof(IPipelineBehavior<,>), typeof(ValidationBehavior<,>));
});

// Add FluentValidation
builder.Services.AddFluentValidationAutoValidation(config => {
    config.DisableDataAnnotationsValidation = true;
});
builder.Services.AddValidatorsFromAssemblyContaining<RegisterCommandValidator>();


var app = builder.Build();

// Configure the HTTP request pipeline
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection();

// Add request localization middleware
app.UseRequestLocalization();

// Add exception handling middleware
app.UseMiddleware<Hope.Api.Middleware.ExceptionHandlingMiddleware>();

app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();

app.Run();